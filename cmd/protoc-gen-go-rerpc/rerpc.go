package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"

	"github.com/akshayjshah/rerpc"
)

const (
	contextPackage = protogen.GoImportPath("context")
	rerpcPackage   = protogen.GoImportPath("github.com/akshayjshah/rerpc")
	httpPackage    = protogen.GoImportPath("net/http")
	protoPackage   = protogen.GoImportPath("google.golang.org/protobuf/proto")
	stringsPackage = protogen.GoImportPath("strings")
)

func deprecated(g *protogen.GeneratedFile) {
	comment(g, "// Deprecated: do not use.")
}

func generate(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_rerpc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	preamble(gen, file, g)
	content(file, g)
	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	out := fmt.Sprintf("v%d.%d.%d", v.GetMajor(), v.GetMinor(), v.GetPatch())
	if s := v.GetSuffix(); s != "" {
		out += "-" + s
	}
	return out
}

func preamble(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	g.P("// Code generated by protoc-gen-go-rerpc. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-rerpc v", rerpc.Version)
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		comment(g, file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
}

func content(file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	handshake(g)
	for _, svc := range file.Services {
		service(file, g, svc)
	}
}

func handshake(g *protogen.GeneratedFile) {
	comment(g, "This is a compile-time assertion to ensure that this generated file ",
		"and the rerpc package are compatible.")
	g.P("const _ = ", rerpcPackage.Ident("SupportsCodeGenV0"), " // reRPC v0.0.1 or later")
	g.P()
}

func service(file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	clientName := service.GoName + "ClientReRPC"
	serverName := service.GoName + "ServerReRPC"

	clientInterface(g, service, clientName)
	clientImplementation(g, service, clientName)
	serverInterface(g, service, serverName)
	serverConstructor(g, service, serverName)
	serverImplementation(g, service, serverName)
}

func clientInterface(g *protogen.GeneratedFile, service *protogen.Service, name string) {
	comment(g, name, " is a client for the ", service.Desc.FullName(), " service.")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		deprecated(g)
	}
	g.Annotate(name, service.Location)
	g.P("type ", name, " interface {")
	for _, method := range unaryMethods(service) {
		g.Annotate(name+"."+method.GoName, method.Location)
		g.P(method.Comments.Leading, clientSignature(g, method))
	}
	g.P("}")
	g.P()
}

func clientSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		deprecated(g)
	}
	return method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context")) +
		", req *" + g.QualifiedGoIdent(method.Input.GoIdent) +
		", opts ..." + g.QualifiedGoIdent(rerpcPackage.Ident("CallOption")) + ") " +
		"(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
}

func clientImplementation(g *protogen.GeneratedFile, service *protogen.Service, name string) {
	// Client struct.
	g.P("type ", unexport(name), " struct {")
	g.P("url string")
	g.P("doer ", rerpcPackage.Ident("Doer"))
	g.P("options []", rerpcPackage.Ident("CallOption"))
	g.P("}")
	g.P()

	// Client constructor.
	comment(g, "New", name, " constructs a client for the ", service.Desc.FullName(),
		" service. Call options passed here apply to all calls made with this client.")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		deprecated(g)
	}
	g.P("func New", name, " (url string, doer ", rerpcPackage.Ident("Doer"),
		", opts ...", rerpcPackage.Ident("CallOption"), ") ", name, " {")
	g.P("return &", unexport(name), "{")
	g.P("url: ", stringsPackage.Ident("TrimRight"), `(url, "/"),`)
	g.P("doer: doer,")
	g.P("options: opts,")
	g.P("}")
	g.P("}")
	g.P()

	// Client method implementations.
	for _, method := range unaryMethods(service) {
		clientMethod(g, method)
	}
}

func clientMethod(g *protogen.GeneratedFile, method *protogen.Method) {
	service := method.Parent
	fqn := fmt.Sprintf("%s/%s", service.Desc.FullName(), method.Desc.Name())

	comment(g, method.GoName, " calls ", fqn, ".")
	if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		g.P("//")
		deprecated(g)
	}
	g.P("func (c *", unexport(service.GoName), "ClientReRPC) ", clientSignature(g, method), "{")
	g.P("options := make([]", rerpcPackage.Ident("CallOption"), ", 0, len(opts)+len(c.options))")
	g.P("options = append(options, c.options...)")
	g.P("options = append(options, opts...)")
	g.P("res := &", method.Output.GoIdent, "{}")
	g.P(`url := c.url + "/`, fqn, `"`)
	g.P("if err := ", rerpcPackage.Ident("Invoke"), "(ctx, url, c.doer, req, res, options...); err != nil {")
	g.P("return nil, err")
	g.P("}")
	g.P("return res, nil")
	g.P("}")
	g.P()
}

func serverInterface(g *protogen.GeneratedFile, service *protogen.Service, name string) {
	comment(g, name, " is a server for the ", service.GoName,
		" service. For forward compatibility, all implementations must embed Unimplemented",
		name, ". See grpc/grpc-go#3794 for details.")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		deprecated(g)
	}
	g.Annotate(name, service.Location)
	g.P("type ", name, " interface {")
	for _, method := range unaryMethods(service) {
		g.Annotate(name+"."+method.GoName, method.Location)
		g.P(method.Comments.Leading, serverSignature(g, method))
	}
	g.P("mustEmbedUnimplemented", name, "()")
	g.P("}")
	g.P()
}

func serverSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		deprecated(g)
	}
	return method.GoName + "(" + g.QualifiedGoIdent(contextPackage.Ident("Context")) +
		", *" + g.QualifiedGoIdent(method.Input.GoIdent) + ") " +
		"(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
}

func serverConstructor(g *protogen.GeneratedFile, service *protogen.Service, name string) {
	sname := service.Desc.FullName()
	comment(g, "New", service.GoName, "HandlerReRPC wraps the service implementation",
		" in an HTTP handler. It returns the handler and the path on which to mount it.")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		deprecated(g)
	}
	g.P("func New", service.GoName, "HandlerReRPC(svc ", name, ", opts ...", rerpcPackage.Ident("HandlerOption"),
		") (string, ", httpPackage.Ident("Handler"), ") {")
	g.P("mux := ", httpPackage.Ident("NewServeMux"), "()")
	g.P()
	for _, method := range unaryMethods(service) {
		fqn := fmt.Sprintf("%s/%s", sname, method.Desc.Name())
		hname := unexport(string(method.Desc.Name()))
		g.P(hname, " := ", rerpcPackage.Ident("NewHandler"), "(")
		g.P(`"`, method.Desc.FullName(), `",`)
		g.P("func(ctx ", contextPackage.Ident("Context"), ", req ", protoPackage.Ident("Message"), ") (",
			protoPackage.Ident("Message"), ", error) {")
		g.P("typed, ok := req.(*", method.Input.GoIdent, ")")
		g.P("if !ok {")
		g.P("return nil, ", rerpcPackage.Ident("Errorf"), "(", rerpcPackage.Ident("CodeInternal"), `, "can't call `, fqn, ` with a %v", req.ProtoReflect().Descriptor().FullName())`)
		g.P("}")
		g.P("return svc.", method.GoName, "(ctx, typed)")
		g.P("},")
		g.P("opts...,")
		g.P(")")
		g.P(`mux.HandleFunc("/`, fqn, `", func(w `, httpPackage.Ident("ResponseWriter"), ", r *", httpPackage.Ident("Request"), ") {")
		g.P(hname, ".Serve(w, r, &", method.Input.GoIdent, "{})")
		g.P("})")
		g.P()
	}
	g.P(`return "/`, sname, `/", mux`)
	g.P("}")
	g.P()
}

func serverImplementation(g *protogen.GeneratedFile, service *protogen.Service, name string) {
	// Unimplemented server implementation (for forward compatibility).
	comment(g, "Unimplemented", name, " returns an UNIMPLEMENTED error from",
		" all methods. To maintain forward compatibility, all implementations",
		" of ", name, " must embed Unimplemented", name, ". ",
		"See grpc/grpc-go#3794 for details.")
	g.P("type Unimplemented", name, " struct {}")
	g.P()
	for _, method := range unaryMethods(service) {
		g.P("func (Unimplemented", name, ") ", serverSignature(g, method), "{")
		g.P("return nil, ", rerpcPackage.Ident("Errorf"), "(", rerpcPackage.Ident("CodeUnimplemented"), `, "method `, method.GoName, ` not implemented")`)
		g.P("}")
		g.P()
	}
	g.P("func (Unimplemented", name, ") mustEmbedUnimplemented", name, "() {}")
	g.P()
}

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }

func unaryMethods(service *protogen.Service) []*protogen.Method {
	unary := make([]*protogen.Method, 0, len(service.Methods))
	for _, m := range service.Methods {
		if m.Desc.IsStreamingServer() || m.Desc.IsStreamingClient() {
			continue
		}
		unary = append(unary, m)
	}
	return unary
}
