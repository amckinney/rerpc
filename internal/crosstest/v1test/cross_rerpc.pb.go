// Code generated by protoc-gen-go-rerpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-rerpc v0.0.1
// - protoc             v3.17.3
// source: internal/crosstest/v1test/cross.proto

package crosspb

import (
	context "context"
	rerpc "github.com/rerpc/rerpc"
	proto "google.golang.org/protobuf/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the
// rerpc package are compatible. If you get a compiler error that this constant
// isn't defined, this code was generated with a version of rerpc newer than the
// one compiled into your binary. You can fix the problem by either regenerating
// this code with an older version of rerpc or updating the rerpc version
// compiled into your binary.
const _ = rerpc.SupportsCodeGenV0 // requires reRPC v0.0.1 or later

// CrossServiceClientReRPC is a client for the
// internal.crosstest.v1test.CrossService service.
type CrossServiceClientReRPC interface {
	Ping(ctx context.Context, req *PingRequest, opts ...rerpc.CallOption) (*PingResponse, error)
	Fail(ctx context.Context, req *FailRequest, opts ...rerpc.CallOption) (*FailResponse, error)
}

type crossServiceClientReRPC struct {
	ping    rerpc.Client
	fail    rerpc.Client
	options []rerpc.CallOption
}

// NewCrossServiceClientReRPC constructs a client for the
// internal.crosstest.v1test.CrossService service. Call options passed here
// apply to all calls made with this client.
//
// The URL supplied here should be the base URL for the gRPC server (e.g.,
// https://api.acme.com or https://acme.com/grpc).
func NewCrossServiceClientReRPC(baseURL string, doer rerpc.Doer, opts ...rerpc.CallOption) CrossServiceClientReRPC {
	baseURL = strings.TrimRight(baseURL, "/")
	return &crossServiceClientReRPC{
		ping: *rerpc.NewClient(
			doer,
			baseURL,
			"internal.crosstest.v1test", // protobuf package
			"CrossService",              // protobuf service
			"Ping",                      // protobuf method
			opts...,
		),
		fail: *rerpc.NewClient(
			doer,
			baseURL,
			"internal.crosstest.v1test", // protobuf package
			"CrossService",              // protobuf service
			"Fail",                      // protobuf method
			opts...,
		),
		options: opts,
	}
}

// Ping calls internal.crosstest.v1test.CrossService.Ping. Call options passed
// here apply only to this call.
func (c *crossServiceClientReRPC) Ping(ctx context.Context, req *PingRequest, opts ...rerpc.CallOption) (*PingResponse, error) {
	wrapped := rerpc.Func(func(ctx context.Context, msg proto.Message) (proto.Message, error) {
		stream := c.ping.Call(ctx, opts...)
		if err := stream.Send(req); err != nil {
			_ = stream.CloseSend(err)
			_ = stream.CloseReceive()
			return nil, err
		}
		if err := stream.CloseSend(nil); err != nil {
			_ = stream.CloseReceive()
			return nil, err
		}
		var res PingResponse
		if err := stream.Receive(&res); err != nil {
			_ = stream.CloseReceive()
			return nil, err
		}
		return &res, stream.CloseReceive()
	})
	mergedOpts := append([]rerpc.CallOption{}, c.options...)
	mergedOpts = append(mergedOpts, opts...)
	if ic := rerpc.ConfiguredCallInterceptor(mergedOpts...); ic != nil {
		wrapped = ic.Wrap(wrapped)
	}
	res, err := wrapped(c.ping.Context(ctx, opts...), req)
	if err != nil {
		return nil, err
	}
	typed, ok := res.(*PingResponse)
	if !ok {
		return nil, rerpc.Errorf(rerpc.CodeInternal, "expected response to be internal.crosstest.v1test.PingResponse, got %v", res.ProtoReflect().Descriptor().FullName())
	}
	return typed, nil
}

// Fail calls internal.crosstest.v1test.CrossService.Fail. Call options passed
// here apply only to this call.
func (c *crossServiceClientReRPC) Fail(ctx context.Context, req *FailRequest, opts ...rerpc.CallOption) (*FailResponse, error) {
	wrapped := rerpc.Func(func(ctx context.Context, msg proto.Message) (proto.Message, error) {
		stream := c.fail.Call(ctx, opts...)
		if err := stream.Send(req); err != nil {
			_ = stream.CloseSend(err)
			_ = stream.CloseReceive()
			return nil, err
		}
		if err := stream.CloseSend(nil); err != nil {
			_ = stream.CloseReceive()
			return nil, err
		}
		var res FailResponse
		if err := stream.Receive(&res); err != nil {
			_ = stream.CloseReceive()
			return nil, err
		}
		return &res, stream.CloseReceive()
	})
	mergedOpts := append([]rerpc.CallOption{}, c.options...)
	mergedOpts = append(mergedOpts, opts...)
	if ic := rerpc.ConfiguredCallInterceptor(mergedOpts...); ic != nil {
		wrapped = ic.Wrap(wrapped)
	}
	res, err := wrapped(c.fail.Context(ctx, opts...), req)
	if err != nil {
		return nil, err
	}
	typed, ok := res.(*FailResponse)
	if !ok {
		return nil, rerpc.Errorf(rerpc.CodeInternal, "expected response to be internal.crosstest.v1test.FailResponse, got %v", res.ProtoReflect().Descriptor().FullName())
	}
	return typed, nil
}

// CrossServiceReRPC is a server for the internal.crosstest.v1test.CrossService
// service. To make sure that adding methods to this protobuf service doesn't
// break all implementations of this interface, all implementations must embed
// UnimplementedCrossServiceReRPC.
//
// By default, recent versions of grpc-go have a similar forward compatibility
// requirement. See https://github.com/grpc/grpc-go/issues/3794 for a longer
// discussion.
type CrossServiceReRPC interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Fail(context.Context, *FailRequest) (*FailResponse, error)
	mustEmbedUnimplementedCrossServiceReRPC()
}

// NewCrossServiceHandlerReRPC wraps the service implementation in an HTTP
// handler. It returns the handler and the path on which to mount it.
func NewCrossServiceHandlerReRPC(svc CrossServiceReRPC, opts ...rerpc.HandlerOption) (string, *http.ServeMux) {
	mux := http.NewServeMux()
	ic := rerpc.ConfiguredHandlerInterceptor(opts...)

	pingFunc := rerpc.Func(func(ctx context.Context, req proto.Message) (proto.Message, error) {
		typed, ok := req.(*PingRequest)
		if !ok {
			return nil, rerpc.Errorf(
				rerpc.CodeInternal,
				"can't call internal.crosstest.v1test.CrossService.Ping with a %v",
				req.ProtoReflect().Descriptor().FullName(),
			)
		}
		return svc.Ping(ctx, typed)
	})
	if ic != nil {
		pingFunc = ic.Wrap(pingFunc)
	}
	ping := rerpc.NewHandler(
		"internal.crosstest.v1test", // protobuf package
		"CrossService",              // protobuf service
		"Ping",                      // protobuf method
		rerpc.HandlerStreamFunc(func(ctx context.Context, stream rerpc.Stream) {
			defer stream.CloseReceive()
			var req PingRequest
			if err := stream.Receive(&req); err != nil {
				_ = stream.CloseSend(err)
				return
			}
			res, err := pingFunc(ctx, &req)
			if err != nil {
				_ = stream.CloseSend(err)
				return
			}
			_ = stream.CloseSend(stream.Send(res))
		}),
		opts...,
	)
	mux.Handle(ping.Path(), ping)

	failFunc := rerpc.Func(func(ctx context.Context, req proto.Message) (proto.Message, error) {
		typed, ok := req.(*FailRequest)
		if !ok {
			return nil, rerpc.Errorf(
				rerpc.CodeInternal,
				"can't call internal.crosstest.v1test.CrossService.Fail with a %v",
				req.ProtoReflect().Descriptor().FullName(),
			)
		}
		return svc.Fail(ctx, typed)
	})
	if ic != nil {
		failFunc = ic.Wrap(failFunc)
	}
	fail := rerpc.NewHandler(
		"internal.crosstest.v1test", // protobuf package
		"CrossService",              // protobuf service
		"Fail",                      // protobuf method
		rerpc.HandlerStreamFunc(func(ctx context.Context, stream rerpc.Stream) {
			defer stream.CloseReceive()
			var req FailRequest
			if err := stream.Receive(&req); err != nil {
				_ = stream.CloseSend(err)
				return
			}
			res, err := failFunc(ctx, &req)
			if err != nil {
				_ = stream.CloseSend(err)
				return
			}
			_ = stream.CloseSend(stream.Send(res))
		}),
		opts...,
	)
	mux.Handle(fail.Path(), fail)

	// Respond to unknown protobuf methods with gRPC and Twirp's 404 equivalents.
	mux.Handle("/", rerpc.NewBadRouteHandler(opts...))

	return fail.ServicePath(), mux
}

var _ CrossServiceReRPC = (*UnimplementedCrossServiceReRPC)(nil) // verify interface implementation

// UnimplementedCrossServiceReRPC returns CodeUnimplemented from all methods. To
// maintain forward compatibility, all implementations of CrossServiceReRPC must
// embed UnimplementedCrossServiceReRPC.
type UnimplementedCrossServiceReRPC struct{}

func (UnimplementedCrossServiceReRPC) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, rerpc.Errorf(rerpc.CodeUnimplemented, "internal.crosstest.v1test.CrossService.Ping isn't implemented")
}

func (UnimplementedCrossServiceReRPC) Fail(context.Context, *FailRequest) (*FailResponse, error) {
	return nil, rerpc.Errorf(rerpc.CodeUnimplemented, "internal.crosstest.v1test.CrossService.Fail isn't implemented")
}

func (UnimplementedCrossServiceReRPC) mustEmbedUnimplementedCrossServiceReRPC() {}
