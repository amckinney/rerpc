// Code generated by protoc-gen-go-rerpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-rerpc v0.0.1
// - protoc             v3.17.3
// source: internal/crosstest/crosspb/cross.proto

package crosspb

import (
	context "context"
	rerpc "github.com/akshayjshah/rerpc"
	proto "google.golang.org/protobuf/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the
// rerpc package are compatible.
const _ = rerpc.SupportsCodeGenV0 // reRPC v0.0.1 or later

// CrosstestClientReRPC is a client for the
// rerpc.internal.crosstest.cross.v0.Crosstest service.
type CrosstestClientReRPC interface {
	Ping(ctx context.Context, req *PingRequest, opts ...rerpc.CallOption) (*PingResponse, error)
	Fail(ctx context.Context, req *FailRequest, opts ...rerpc.CallOption) (*FailResponse, error)
}

type crosstestClientReRPC struct {
	url     string
	doer    rerpc.Doer
	options []rerpc.CallOption
}

// NewCrosstestClientReRPC constructs a client for the
// rerpc.internal.crosstest.cross.v0.Crosstest service. Call options passed here
// apply to all calls made with this client.
func NewCrosstestClientReRPC(url string, doer rerpc.Doer, opts ...rerpc.CallOption) CrosstestClientReRPC {
	return &crosstestClientReRPC{
		url:     strings.TrimRight(url, "/"),
		doer:    doer,
		options: opts,
	}
}

// Ping calls rerpc.internal.crosstest.cross.v0.Crosstest/Ping.
func (c *crosstestClientReRPC) Ping(ctx context.Context, req *PingRequest, opts ...rerpc.CallOption) (*PingResponse, error) {
	options := make([]rerpc.CallOption, 0, len(opts)+len(c.options))
	options = append(options, c.options...)
	options = append(options, opts...)
	res := &PingResponse{}
	url := c.url + "/rerpc.internal.crosstest.cross.v0.Crosstest/Ping"
	if err := rerpc.Invoke(ctx, url, c.doer, req, res, options...); err != nil {
		return nil, err
	}
	return res, nil
}

// Fail calls rerpc.internal.crosstest.cross.v0.Crosstest/Fail.
func (c *crosstestClientReRPC) Fail(ctx context.Context, req *FailRequest, opts ...rerpc.CallOption) (*FailResponse, error) {
	options := make([]rerpc.CallOption, 0, len(opts)+len(c.options))
	options = append(options, c.options...)
	options = append(options, opts...)
	res := &FailResponse{}
	url := c.url + "/rerpc.internal.crosstest.cross.v0.Crosstest/Fail"
	if err := rerpc.Invoke(ctx, url, c.doer, req, res, options...); err != nil {
		return nil, err
	}
	return res, nil
}

// CrosstestServerReRPC is a server for the Crosstest service. For forward
// compatibility, all implementations must embed
// UnimplementedCrosstestServerReRPC. See grpc/grpc-go#3794 for details.
type CrosstestServerReRPC interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Fail(context.Context, *FailRequest) (*FailResponse, error)
	mustEmbedUnimplementedCrosstestServerReRPC()
}

// NewCrosstestHandlerReRPC wraps the service implementation in an HTTP handler.
// It returns the handler and the path on which to mount it.
func NewCrosstestHandlerReRPC(svc CrosstestServerReRPC, opts ...rerpc.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()

	ping := rerpc.NewHandler(
		"rerpc.internal.crosstest.cross.v0.Crosstest.Ping",
		func(ctx context.Context, req proto.Message) (proto.Message, error) {
			typed, ok := req.(*PingRequest)
			if !ok {
				return nil, rerpc.Errorf(rerpc.CodeInternal, "can't call rerpc.internal.crosstest.cross.v0.Crosstest/Ping with a %v", req.ProtoReflect().Descriptor().FullName())
			}
			return svc.Ping(ctx, typed)
		},
		opts...,
	)
	mux.HandleFunc("/rerpc.internal.crosstest.cross.v0.Crosstest/Ping", func(w http.ResponseWriter, r *http.Request) {
		ping.Serve(w, r, &PingRequest{})
	})

	fail := rerpc.NewHandler(
		"rerpc.internal.crosstest.cross.v0.Crosstest.Fail",
		func(ctx context.Context, req proto.Message) (proto.Message, error) {
			typed, ok := req.(*FailRequest)
			if !ok {
				return nil, rerpc.Errorf(rerpc.CodeInternal, "can't call rerpc.internal.crosstest.cross.v0.Crosstest/Fail with a %v", req.ProtoReflect().Descriptor().FullName())
			}
			return svc.Fail(ctx, typed)
		},
		opts...,
	)
	mux.HandleFunc("/rerpc.internal.crosstest.cross.v0.Crosstest/Fail", func(w http.ResponseWriter, r *http.Request) {
		fail.Serve(w, r, &FailRequest{})
	})

	return "/rerpc.internal.crosstest.cross.v0.Crosstest/", mux
}

// UnimplementedCrosstestServerReRPC returns an UNIMPLEMENTED error from all
// methods. To maintain forward compatibility, all implementations of
// CrosstestServerReRPC must embed UnimplementedCrosstestServerReRPC. See
// grpc/grpc-go#3794 for details.
type UnimplementedCrosstestServerReRPC struct{}

func (UnimplementedCrosstestServerReRPC) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, rerpc.Errorf(rerpc.CodeUnimplemented, "method Ping not implemented")
}

func (UnimplementedCrosstestServerReRPC) Fail(context.Context, *FailRequest) (*FailResponse, error) {
	return nil, rerpc.Errorf(rerpc.CodeUnimplemented, "method Fail not implemented")
}

func (UnimplementedCrosstestServerReRPC) mustEmbedUnimplementedCrosstestServerReRPC() {}
