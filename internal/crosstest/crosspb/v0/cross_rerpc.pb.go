// Code generated by protoc-gen-go-rerpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-rerpc v0.0.1
// - protoc             v3.17.3
// source: internal/crosstest/crosspb/cross.proto

package crosspb

import (
	context "context"
	rerpc "github.com/akshayjshah/rerpc"
	proto "google.golang.org/protobuf/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the
// rerpc package are compatible. If you get a compiler error that this constant
// isn't defined, this code was generated with a version of rerpc newer than the
// one compiled into your binary. You can fix the problem by either regenerating
// this code with an older version of rerpc or updating the rerpc version
// compiled into your binary.
const _ = rerpc.SupportsCodeGenV0 // requires reRPC v0.0.1 or later

// CrosstestClientReRPC is a client for the
// rerpc.internal.crosstest.cross.v0.Crosstest service.
type CrosstestClientReRPC interface {
	Ping(ctx context.Context, req *PingRequest, opts ...rerpc.CallOption) (*PingResponse, error)
	Fail(ctx context.Context, req *FailRequest, opts ...rerpc.CallOption) (*FailResponse, error)
}

type crosstestClientReRPC struct {
	ping rerpc.Client
	fail rerpc.Client
}

// NewCrosstestClientReRPC constructs a client for the
// rerpc.internal.crosstest.cross.v0.Crosstest service. Call options passed here
// apply to all calls made with this client.
//
// The URL supplied here should be the base URL for the gRPC server (e.g.,
// https://api.acme.com or https://acme.com/api/grpc).
func NewCrosstestClientReRPC(baseURL string, doer rerpc.Doer, opts ...rerpc.CallOption) CrosstestClientReRPC {
	baseURL = strings.TrimRight(baseURL, "/")
	return &crosstestClientReRPC{
		ping: *rerpc.NewClient(
			doer,
			baseURL+"/rerpc.internal.crosstest.cross.v0.Crosstest/Ping", // complete URL to call method
			"rerpc.internal.crosstest.cross.v0.Crosstest.Ping",          // fully-qualified protobuf identifier
			opts...,
		),
		fail: *rerpc.NewClient(
			doer,
			baseURL+"/rerpc.internal.crosstest.cross.v0.Crosstest/Fail", // complete URL to call method
			"rerpc.internal.crosstest.cross.v0.Crosstest.Fail",          // fully-qualified protobuf identifier
			opts...,
		),
	}
}

// Ping calls rerpc.internal.crosstest.cross.v0.Crosstest.Ping. Call options
// passed here apply only to this call.
func (c *crosstestClientReRPC) Ping(ctx context.Context, req *PingRequest, opts ...rerpc.CallOption) (*PingResponse, error) {
	res := &PingResponse{}
	if err := c.ping.Call(ctx, req, res, opts...); err != nil {
		return nil, err
	}
	return res, nil
}

// Fail calls rerpc.internal.crosstest.cross.v0.Crosstest.Fail. Call options
// passed here apply only to this call.
func (c *crosstestClientReRPC) Fail(ctx context.Context, req *FailRequest, opts ...rerpc.CallOption) (*FailResponse, error) {
	res := &FailResponse{}
	if err := c.fail.Call(ctx, req, res, opts...); err != nil {
		return nil, err
	}
	return res, nil
}

// CrosstestServerReRPC is a server for the
// rerpc.internal.crosstest.cross.v0.Crosstest service. To make sure that adding
// methods to this protobuf service doesn't break all implementations of this
// interface, all implementations must embed UnimplementedCrosstestServerReRPC.
//
// By default, recent versions of grpc-go have a similar forward compatibility
// requirement. See https://github.com/grpc/grpc-go/issues/3794 for a longer
// discussion.
type CrosstestServerReRPC interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Fail(context.Context, *FailRequest) (*FailResponse, error)
	mustEmbedUnimplementedCrosstestServerReRPC()
}

// NewCrosstestHandlerReRPC wraps the service implementation in an HTTP handler.
// It returns the handler and the path on which to mount it.
func NewCrosstestHandlerReRPC(svc CrosstestServerReRPC, opts ...rerpc.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()

	ping := rerpc.NewHandler(
		"rerpc.internal.crosstest.cross.v0.Crosstest.Ping",
		rerpc.UnaryHandler(func(ctx context.Context, req proto.Message) (proto.Message, error) {
			typed, ok := req.(*PingRequest)
			if !ok {
				return nil, rerpc.Errorf(
					rerpc.CodeInternal,
					"error in generated code: expected req to be a *PingRequest, got a %T",
					req,
				)
			}
			return svc.Ping(ctx, typed)
		}),
		opts...,
	)
	mux.HandleFunc("/rerpc.internal.crosstest.cross.v0.Crosstest/Ping", func(w http.ResponseWriter, r *http.Request) {
		ping.Serve(w, r, &PingRequest{})
	})

	fail := rerpc.NewHandler(
		"rerpc.internal.crosstest.cross.v0.Crosstest.Fail",
		rerpc.UnaryHandler(func(ctx context.Context, req proto.Message) (proto.Message, error) {
			typed, ok := req.(*FailRequest)
			if !ok {
				return nil, rerpc.Errorf(
					rerpc.CodeInternal,
					"error in generated code: expected req to be a *FailRequest, got a %T",
					req,
				)
			}
			return svc.Fail(ctx, typed)
		}),
		opts...,
	)
	mux.HandleFunc("/rerpc.internal.crosstest.cross.v0.Crosstest/Fail", func(w http.ResponseWriter, r *http.Request) {
		fail.Serve(w, r, &FailRequest{})
	})

	return "/rerpc.internal.crosstest.cross.v0.Crosstest/", mux
}

var _ CrosstestServerReRPC = (*UnimplementedCrosstestServerReRPC)(nil) // verify interface implementation

// UnimplementedCrosstestServerReRPC returns CodeUnimplemented from all methods.
// To maintain forward compatibility, all implementations of
// CrosstestServerReRPC must embed UnimplementedCrosstestServerReRPC.
type UnimplementedCrosstestServerReRPC struct{}

func (UnimplementedCrosstestServerReRPC) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, rerpc.Errorf(rerpc.CodeUnimplemented, "method Ping not implemented")
}

func (UnimplementedCrosstestServerReRPC) Fail(context.Context, *FailRequest) (*FailResponse, error) {
	return nil, rerpc.Errorf(rerpc.CodeUnimplemented, "method Fail not implemented")
}

func (UnimplementedCrosstestServerReRPC) mustEmbedUnimplementedCrosstestServerReRPC() {}
