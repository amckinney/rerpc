// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package crosspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrosstestClient is the client API for Crosstest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrosstestClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Fail(ctx context.Context, in *FailRequest, opts ...grpc.CallOption) (*FailResponse, error)
}

type crosstestClient struct {
	cc grpc.ClientConnInterface
}

func NewCrosstestClient(cc grpc.ClientConnInterface) CrosstestClient {
	return &crosstestClient{cc}
}

func (c *crosstestClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/rerpc.internal.crosstest.cross.v0.Crosstest/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crosstestClient) Fail(ctx context.Context, in *FailRequest, opts ...grpc.CallOption) (*FailResponse, error) {
	out := new(FailResponse)
	err := c.cc.Invoke(ctx, "/rerpc.internal.crosstest.cross.v0.Crosstest/Fail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrosstestServer is the server API for Crosstest service.
// All implementations must embed UnimplementedCrosstestServer
// for forward compatibility
type CrosstestServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Fail(context.Context, *FailRequest) (*FailResponse, error)
	mustEmbedUnimplementedCrosstestServer()
}

// UnimplementedCrosstestServer must be embedded to have forward compatible implementations.
type UnimplementedCrosstestServer struct {
}

func (UnimplementedCrosstestServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCrosstestServer) Fail(context.Context, *FailRequest) (*FailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fail not implemented")
}
func (UnimplementedCrosstestServer) mustEmbedUnimplementedCrosstestServer() {}

// UnsafeCrosstestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrosstestServer will
// result in compilation errors.
type UnsafeCrosstestServer interface {
	mustEmbedUnimplementedCrosstestServer()
}

func RegisterCrosstestServer(s grpc.ServiceRegistrar, srv CrosstestServer) {
	s.RegisterService(&Crosstest_ServiceDesc, srv)
}

func _Crosstest_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrosstestServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rerpc.internal.crosstest.cross.v0.Crosstest/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrosstestServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crosstest_Fail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrosstestServer).Fail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rerpc.internal.crosstest.cross.v0.Crosstest/Fail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrosstestServer).Fail(ctx, req.(*FailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Crosstest_ServiceDesc is the grpc.ServiceDesc for Crosstest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crosstest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rerpc.internal.crosstest.cross.v0.Crosstest",
	HandlerType: (*CrosstestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Crosstest_Ping_Handler,
		},
		{
			MethodName: "Fail",
			Handler:    _Crosstest_Fail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/crosstest/crosspb/cross.proto",
}
