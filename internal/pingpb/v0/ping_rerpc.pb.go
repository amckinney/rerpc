// Code generated by protoc-gen-go-rerpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-rerpc v0.0.1
// - protoc             v3.17.3
// source: internal/pingpb/ping.proto

package pingpb

import (
	context "context"
	rerpc "github.com/akshayjshah/rerpc"
	proto "google.golang.org/protobuf/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the
// rerpc package are compatible.
const _ = rerpc.SupportsCodeGenV0 // reRPC v0.0.1 or later

// PingClientReRPC is a client for the rerpc.internal.ping.v0.Ping service.
type PingClientReRPC interface {
	Ping(ctx context.Context, req *PingRequest, opts ...rerpc.CallOption) (*PingResponse, error)
	Fail(ctx context.Context, req *FailRequest, opts ...rerpc.CallOption) (*FailResponse, error)
}

type pingClientReRPC struct {
	url  string
	doer rerpc.Doer
}

// NewPingClientReRPC constructs a client for the rerpc.internal.ping.v0.Ping
// service.
func NewPingClientReRPC(url string, doer rerpc.Doer) PingClientReRPC {
	return &pingClientReRPC{
		url:  strings.TrimRight(url, "/"),
		doer: doer,
	}
}

// Ping calls rerpc.internal.ping.v0.Ping/Ping.
func (c *pingClientReRPC) Ping(ctx context.Context, req *PingRequest, opts ...rerpc.CallOption) (*PingResponse, error) {
	res := &PingResponse{}
	url := c.url + "/rerpc.internal.ping.v0.Ping/Ping"
	if err := rerpc.Invoke(ctx, url, c.doer, req, res); err != nil {
		return nil, err
	}
	return res, nil
}

// Fail calls rerpc.internal.ping.v0.Ping/Fail.
func (c *pingClientReRPC) Fail(ctx context.Context, req *FailRequest, opts ...rerpc.CallOption) (*FailResponse, error) {
	res := &FailResponse{}
	url := c.url + "/rerpc.internal.ping.v0.Ping/Fail"
	if err := rerpc.Invoke(ctx, url, c.doer, req, res); err != nil {
		return nil, err
	}
	return res, nil
}

// PingServerReRPC is a server for the Ping service. For forward compatibility,
// all implementations must embed UnimplementedPingServerReRPC. See
// grpc/grpc-go#3794 for details.
type PingServerReRPC interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Fail(context.Context, *FailRequest) (*FailResponse, error)
	mustEmbedUnimplementedPingServerReRPC()
}

// NewPingHandlerReRPC wraps the service implementation in an HTTP handler. It
// returns the handler and the path on which to mount it.
func NewPingHandlerReRPC(svc PingServerReRPC) (string, http.Handler) {
	mux := http.NewServeMux()

	ping := rerpc.Handler{
		Implementation: func(ctx context.Context, req proto.Message) (proto.Message, error) {
			typed, ok := req.(*PingRequest)
			if !ok {
				return nil, rerpc.Errorf(rerpc.CodeInternal, "can't call rerpc.internal.ping.v0.Ping/Ping with a %T", req)
			}
			return svc.Ping(ctx, typed)
		},
	}
	mux.HandleFunc("/rerpc.internal.ping.v0.Ping/Ping", func(w http.ResponseWriter, r *http.Request) {
		ping.Serve(w, r, &PingRequest{})
	})

	fail := rerpc.Handler{
		Implementation: func(ctx context.Context, req proto.Message) (proto.Message, error) {
			typed, ok := req.(*FailRequest)
			if !ok {
				return nil, rerpc.Errorf(rerpc.CodeInternal, "can't call rerpc.internal.ping.v0.Ping/Fail with a %T", req)
			}
			return svc.Fail(ctx, typed)
		},
	}
	mux.HandleFunc("/rerpc.internal.ping.v0.Ping/Fail", func(w http.ResponseWriter, r *http.Request) {
		fail.Serve(w, r, &FailRequest{})
	})

	return "/rerpc.internal.ping.v0.Ping/", mux
}

// UnimplementedPingServerReRPC returns an UNIMPLEMENTED error from all methods.
// To maintain forward compatibility, all implementations of PingServerReRPC
// must embed UnimplementedPingServerReRPC. See grpc/grpc-go#3794 for details.
type UnimplementedPingServerReRPC struct{}

func (UnimplementedPingServerReRPC) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, rerpc.Errorf(rerpc.CodeUnimplemented, "method Ping not implemented")
}

func (UnimplementedPingServerReRPC) Fail(context.Context, *FailRequest) (*FailResponse, error) {
	return nil, rerpc.Errorf(rerpc.CodeUnimplemented, "method Fail not implemented")
}

func (UnimplementedPingServerReRPC) mustEmbedUnimplementedPingServerReRPC() {}
